# 간략한 내용정리

@ 모킹(mocking)
- 테스트를 최적화하기 위한 도구
- 우리에게는 NYSE 서버가 개입하지 않은 상황에서도 Cash 클래스를 테스트 할 수 있는 방법이 필요하다.
- 모킹은 나쁜 프랙티스이며, 최후의 수단으로만 사용해야 한다.

@ 페이크 객체(fake object)
- 페이크 클래스는 인터페이스의 일부이며 인터페이스와 함께 제공된다.
- 페이크 클래스를 사용하면 테스트를 더 짧게 만들 수 있기 때문에 유지보수성이 눈에 띄게 향상된다.
- 반면에 모킹의 경우, 테스트가 매우 장황해지고, 이해하거나 리팩토링 하기 어려워진다.
- 클래스의 행동이 변경되면 단위테스트가 실패하기 때문에, 단위 테스트는 코드 리팩토링에 큰 도움이 된다.
- 클래스의 공개된 행동을 변경하지 않을 경우 단위 테스트는 실패해선 안된다.

@ 모킹 말고 페이크 객체로!
- 시간이 흐르고 리팩토링을 할 시간이 됐을 때 테스트가 더 이상 유효하지 않은 내부 구현에 결합되어 있기 때문에 할 수 있는 일이라고는 테스트를 폐기 처분하는것 밖에 없다.
- 단위 테스트를 상호작용에 의존하도록 만듦으로써, 리팩토링을 고통스럽고 때로는 불가능하게 만들기 때문이다.
- 페이크 클래스는 인터페이스의 설계에 더 깊이 고민하도록 해준다.

# 느낀점
- 이 책을 읽으면서 가장 어려운 챕터였던것 같다. 모킹에 대한 기본적인 지식이 없어서 그렇기도 하다.
- 요번 챕터는 다시 읽고, 직접 코드로 구현을 해보면서 복습하는 시간을 가져야겠다.. :)
- 모킹 쓰지말고 페이크 객체 사용하기!

# 궁금한 점
---

# 찾아봐야 할 것 
- 모킹, 페이크 객체
